selenium 教程
一、环境搭建
    1. 安装Python；
    2.安装selenium包：
        cmd命令：pip install selenium
    3. 安装浏览器驱动，建议使用Chrome驱动
        网上下载，然后将chromedriver.exe 放到Python的环境目录下
    4.检查是否安装成功：
      ###############################################
      #  driver = webdriver.Chrome()                #
      #  driver.get('https://www.baidu.com')        #
      ###############################################

二、selenium 使用步骤
    1. 创建浏览器驱动；
    2. 定位操作元素；
        通用的元素定位方法：
            1. id定位；
            2. xpath定位；
            3. 其余方法（自行百度）
    3. 判断结果
    4.退出
 
三、元素定位方法
    常见的元素定位方法有：
        1. id 定位，（首先选）
        2. name 定位
        3. xpath 定位
        4. 其余方法，自行百度
        
四、常见的对象操作
   4.1 常见的元素操作如下：
        clear：      清除元素内容，用于文本框
        send_keys：  在元素上模拟按键输入
        click：      单击元素
        submit：     提交表单
        text：       获取元素文本内容
        
   4.2 鼠标事件
        使用鼠标事件需要引用ActionChains 类：
        from selenium.webdriver.common.action_chain import ActionChains
            context_click(): 右击
            double_click():双击
            drag_and_drop：拖动
            move_to_element:鼠标悬停在一个元素上
            click_and_hold：按下鼠标左键在一个元素上
   
   4.3 键盘事件（略）
   
   4.4 打印信息
        title: tab标题
        current_url: 当前页面url
        
###############################################
# os.path.abspath("本地文件路径名")：           
#       用于获取本地路径下的文件                 
#
#
###############################################

五、层级定位
    页面上有很多个属性基本相同的元素 ，现在需要具体
定位到其中的一个。由于属性基本相当，所以在定位的时候会有些麻烦，这时候就需要用到层级定位。先
定位父元素，然后再通过父元素定位子孙元素。
    find_element_by_id(父级).find_element_by_xx(子级)
    
六、定位frame 中的对象
        在 web 应用中经常会出现 frame 嵌套的应用，假设页面上有 A、B 两个 frame，其中 B 在 A 内，
    那么 定位 B 中的内容则需要先到 A，然后再到 B。
        switch_to_frame 方法可以把当前定位的主体切换了 frame 里。怎么理解这句话呢？我们可以从
    frame 的实质去理解。frame 中实际上是嵌入了另一个页面，而 webdriver 每次只能在一个页面识别，
    因此才需要 用 switch_to.frame 方法去获取 frame 中嵌入的页面，对那个页面里的元素进行定位
    
        driver.get(url)
        driver.switch_to_frame(定位元素）    # by_id


七、selenium测试框架

    7.1 项目结构
        --cases
            -test_cases.py      # 引用test_model 中的测试用例，并对用例进行断言
        --config
            -user_config.py     # 账号、测试网站等配置
        --datas
            -element_datas.py   # 设置元素定位
        --model
            -test_model.py      # 编写测试用例
        --report                # 测试报告
        --run.py                # 启动文件
        
    7.2 
    
        
        
            
        
   
    